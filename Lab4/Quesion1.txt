#include <iostream>
using namespace std;

#define MAX_SIZE 25

class Stack {
private:
    int arry[MAX_SIZE]; //define array
    int top;

public:
    Stack() {
        top = -1;
    }
    //check whether stack is empty.
    bool is_this_Empty() {
        if (top<0){
            return true;
        }
        else{
            return false;
        }
    }
    
    // push an element a to the stack
    bool push(int a) {
        top=top+1;
        if (top > MAX_SIZE ) {
            cout << "Stack Overflow!" << endl;
            return false;
        } else {
            arry[top] = a;
            cout << a << " pushed into stack" << endl;
            return true;
        }
    }
    
    //remove a element from the stack
    int pop() {
        if (is_this_Empty()) {
            cout << "Stack Underflow!" << endl;
            return -1;
        } else {
            int popped_element = arry[top];
            top=top-1;
            cout << popped_element << " popped from stack" << endl;
            return popped_element;
        }
    }

    //display final stack
    void displayStack() {
        cout << "Final stack:" << endl;
        for(int i = 0; i <=top; i++) {
            cout << arry[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Stack s;
    s.push(8);  //push 8
    s.push(10); //push 10
    s.push(5); //push 5
    s.push(11); //push 11
    s.push(15); //push 15
    s.push(23); //push 23
    s.push(6); //push 6
    s.push(18); //push 18
    s.push(20); //push 20
    s.push(17); //push 17
    s.displayStack();
    s.pop(); //pop
    s.pop();
    s.pop();
    s.pop();
    s.pop();
    s.push(4); //push 4
    s.push(13); //push 13
    s.push(3); //push 3
    s.push(1); //push 1
    s.displayStack();
    return 0;
}